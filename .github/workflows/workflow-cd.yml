name: CD - workflow

# Controls when the action will run.
on:
 workflow_run:
    workflows: ["CI - workflow"]
    types:
      - completed

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # This workflow contains a single job called "build".
  build:
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Install doctl
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Install Helm
        uses: azure/setup-helm@v4.2.0

      # Step 3: Log in to DigitalOcean Container Registry
      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 1200

      # Step 4: Build and push Docker image with Docker Compose
      - name: Build and push Docker image with Docker Compose
        run: |
          docker compose build
          docker compose push

      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: RSO-2024/clutchbids-k8s
          token: ${{ secrets.RSO_ACCESS_TOKEN }}
          ref: main

      # Step 5: Save DigitalOcean kubeconfig with short-lived credentials
      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 k8s-clutchbids

      # Step 6: Helm upgrade and deploy
      - name: Deploy with Helm
        run: |
          helm upgrade --install $MICROSERVICE_NAME-chart ./$MICROSERVICE_NAME-chart --values ./$MICROSERVICE_NAME-chart/values-prod.yaml
        env:
          MICROSERVICE_NAME: ${{ vars.MICROSERVICE_NAME }}

      # Step 7: Verify deployment
      - name: Verify deployment
        run: kubectl rollout status deployment/$MICROSERVICE_NAME-deployment
        env:
          MICROSERVICE_NAME: ${{ vars.MICROSERVICE_NAME }}